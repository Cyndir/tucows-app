// Code generated by MockGen. DO NOT EDIT.
// Source: messageProcessor.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/messageProcessor.go -package=mocks -source=messageProcessor.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageProcessor is a mock of MessageProcessor interface.
type MockMessageProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProcessorMockRecorder
}

// MockMessageProcessorMockRecorder is the mock recorder for MockMessageProcessor.
type MockMessageProcessorMockRecorder struct {
	mock *MockMessageProcessor
}

// NewMockMessageProcessor creates a new mock instance.
func NewMockMessageProcessor(ctrl *gomock.Controller) *MockMessageProcessor {
	mock := &MockMessageProcessor{ctrl: ctrl}
	mock.recorder = &MockMessageProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProcessor) EXPECT() *MockMessageProcessorMockRecorder {
	return m.recorder
}

// ProcessMessage mocks base method.
func (m *MockMessageProcessor) ProcessMessage(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessMessage", arg0)
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockMessageProcessorMockRecorder) ProcessMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockMessageProcessor)(nil).ProcessMessage), arg0)
}
